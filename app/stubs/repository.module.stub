<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Helpers\PaginationHelper;
use Modules\{{ module }}\Models\{{ modelNamespace }};
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;

final class {{ class }}
{
    /**
     * Display a listing of the resource.
     */
    public function {{ list }}(object $request): LengthAwarePaginator
    {
        $option = PaginationHelper::pageQueryOptions($request);

        return {{ model }}::orderBy($option->column, $option->direction)
            ->paginate($option->perPage);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store{{ model }}(array $data): {{ model }}
    {
        return {{ model }}::create($data);
    }

    /**
     * Display the specified resource.
     */
    public function find{{ model }}(int $id): ?{{ model }}
    {
        try {
            return {{ model }}::findOrFail($id);
        } catch (ModelNotFoundException $e) {
            Log::warning("{{ model }} not found for ID {$id}", ['exception' => $e]);
             throw ValidationException::withMessages([
                'failed' => "{{ model }} not found for ID {$id}",
            ]);
        }
    }

    /**
     * Update the specified resource in storage.
     */
    public function update{{ model }}(int $id, array $data): bool
    {
        try {
            $model = {{ model }}::findOrFail($id);
            return $model->update($data);
        } catch (ModelNotFoundException $e) {
            Log::warning("Failed to update: {{ model }} not found for ID {$id}", ['exception' => $e]);
            throw ValidationException::withMessages([
                'failed' => "Failed to update: {{ model }} not found for ID {$id}",
            ]);
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy{{ model }}(int $id): bool
    {
        try {
            $model = {{ model }}::findOrFail($id);
            return $model->delete();
        } catch (ModelNotFoundException $e) {
            Log::warning("Failed to delete: {{ model }} not found for ID {$id}", ['exception' => $e]);
            throw ValidationException::withMessages([
                'failed' => "Failed to delete: {{ model }} not found for ID {$id}",
            ]);
        }
    }
}
